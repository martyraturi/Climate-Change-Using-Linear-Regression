#Climate Change
#Problem 1.1 - Creating Our First Model
#We are interested in how changes in these variables affect future temperatures, as well as how well these variables explain temperature changes so far. To do this, first read the dataset climate_change.csv into R.
#Then, split the data into a training set, consisting of all the observations up to and including 2006, and a testing set consisting of the remaining years (hint: use subset). A training set refers to the data that will be used to build the model (this is the data we give to the lm() function), and a testing set refers to the data we will use to test our predictive ability.
#Next, build a linear regression model to predict the dependent variable Temp, using MEI, CO2, CH4, N2O, CFC.11, CFC.12, TSI, and Aerosols as independent variables (Year and Month should NOT be used in the model). Use the training set to build the model.

climate <- read.csv(file.choose())
str(climate)
training = subset(climate, Year <= 2006)
summary(training$Year)
testing = subset(climate, Year > 2006)
summary(testing$Year)

LinearReg = lm(Temp ~ MEI + CO2 + CH4 + N2O + CFC.11 + CFC.12 + TSI +
                 Aerosols, data = training)
summary(LinearReg)


#Enter the model R2 (the "Multiple R-squared" value):
#Answer: Multiple R-squared:  0.7509
#Problem 1.2 - Creating Our First Model

#Which variables are significant in the model? We will consider a variable signficant only if the p-value is below 0.05.
summary(LinearReg)

#Problem 2.2 - Understanding the Model
#Compute the correlations between all the variables in the training set. 
cor(training)
#Which of the following independent variables is N2O highly correlated with (absolute correlation greater than 0.7)? Select all that apply
#Answer : CO2, CH4, CFC.12
#Which of the following independent variables is CFC.11 highly correlated with? Select all that apply.
#Answer : CH4,CFC.12


#Problem 3 - Simplifying the Model
#Given that the correlations are so high, let us focus on the N2O variable and build a model with only MEI, TSI, Aerosols and N2O as independent variables. Remember to use the training set to build the model

LinearReg2 = lm(Temp ~ MEI + TSI + Aerosols + N2O, data = training)
summary(LinearReg2)
#Enter the coefficient of N2O in this reduced model:
#Answer:2.532e-02
#Enter the model R2
#Answer:Multiple R-squared:  0.7261


#Problem 4 - Automatically Building the Model
#We have many variables in this problem, and as we have seen above, dropping some from the model does not decrease model quality. R provides a function, step, that will automate the procedure of trying different combinations of variables to find a good compromise of model simplicity and R2. This trade-off is formalized by the Akaike information criterion (AIC) - it can be informally thought of as the quality of the model with a penalty for the number of variables in the model.
#The step function has one argument - the name of the initial model. It returns a simplified model. Use the step function in R to derive a new model, with the full model as the initial model (HINT: If your initial full model was called "climateLM", you could create a new model with the step function by typing step(climateLM). Be sure to save your new model to a variable name so that you can look at the summary. For more information about the step function, type ?step in your R console.)

stepclimate = step(LinearReg)
summary(stepclimate)

#Enter the R2 value of the model produced by the step function:
#Answer : Multiple R-squared:  0.7508
#Which of the following variable(s) were eliminated from the full model by the step function? Select all that apply.
#Answer : CH4

#Problem 5 - Testing on Unseen Data
#We have developed an understanding of how well we can fit a linear regression to the training data, but does the model quality hold when applied to unseen data?
#Using the model produced from the step function, calculate temperature predictions for the testing data set, using the predict function.
#Enter the testing set R2:
prediction = predict(stepclimate, newdata = testing)
prediction
SSE = sum((prediction - testing$Temp)^2)
SST = sum((mean(training$Temp) - testing$Temp)^2)
R2 = 1 - SSE/SST
R2 # Answer: 0.6286051 





